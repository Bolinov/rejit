<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--
Copyright (C) 2013 Alexandre Rames <alexandre@uop.re>

This page is available under the Creative Commons "CC BY" licence.
-->
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Rejit</title>
    <script language="javascript" type="text/javascript" src="resources/flot/jquery.js"></script>
    <script language="javascript" type="text/javascript" src="resources/flot/jquery.flot.js"></script>
    <script language="javascript" type="text/javascript" src="resources/flot/jquery.flot.time.js"></script>
  </head>
  <body>
    <h1>Benchmarks</h1>
    <p>
    Benchmarks presented here all deal with looking for matches of a regular
    expression in a text.
    They try to match the regexp in a text where we ensure there is no match.
    Performance is reported in bytes per second (size of the
    text matched divided by the time to match it).
    That indicates at what speed the engine is able to process the text to look
    for a match.
    This is representative of use cases where the density of matches in the text
    searched is low. (Example use case: grepping through files for a regexp.)

    <br /><br />
    I spent most time working on the engine rather than the benchmarks, so there
    is a lot to improve. A few notes:
    <li>Runs for text of different sizes and engines are independent and use
    different randomly generated texts. The number of iterations is also kept
    relatively small to keep the benchmarks quick to run.</li>
    <li>'best' performance graphs don't take the compilation time into account.
    'worst' performance graphs show performance for 1 run and 1 compilation
    (averaged). 'amortised' performance graphs show performance for 1
    compilation and 100 runs</li>
    <li>v8 results should be interpreted with caution. It is hard to tell what
    the engine exactly does. Performance for benchmarks 4 and 5 is surprising
    when comparing with performance for benchmarks 0, 1, and 2. 
    <br />Javascript time precision is in milliseconds, so the number of runs
    is increased to 20000 for text sizes strictly smaller than 128KiB.</li>
    <li>Benchmarks showing performance of full regexp matching are not
    presented. As explained above, rejit's related mechanisms are completely
    unoptimized and the performance would not be representative.</li>
    <li>Rejit is a prototype implementation, has not been optimized, and there are
    many unimplemented SIMD paths. Hence there are many situations in which
    rejit will perform badly (especially compared to SIMD paths).
    </li>
    <br /><br />
    Finally before showing some graphs, here are a few things where rejit is
    still very bad at. (Eventually they should become as fast as the rest).
    <li>Full matches.</li>
    <li>The handling of <code>.*</code> is bad. Example slow regexp: <code>.*$</code> .</li>
    <li>Regexp for which the fast forward mechanism choses a bracket expression
    as its ffelement.
    Example slow regexp: <code>(sub|regexp)[0-9az@](other|stuff?)</code></li>
    </p>

    <script language="javascript" type="text/javascript" src="resources/bench_plot.js"></script>

